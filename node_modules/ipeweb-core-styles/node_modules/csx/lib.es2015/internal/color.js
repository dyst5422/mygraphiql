import { ensurePercent, formatPercent, parseCSSFunction, cssFunction, formatFloat, roundFloat } from "../utils";
var isTypeArraySupported = typeof Float32Array !== 'undefined';
var RGB = 0, HSL = 1, R = 0, G = 1, B = 2, H = 0, S = 1, L = 2, A = 3;
/**
 * Map of Color converters.  By subtracting the from-format from the to-format, we can
 * quickly map to the right converter. 1-2 and 2-1 yield different results, so this
 * allows us to choose the right converter observing the direction correcly
 */
var converters = (_a = {},
    _a[RGB - HSL] = RGBtoHSL,
    _a[HSL - RGB] = HSLtoRGB,
    _a);
/**
 * Describe the ceiling for each color channel for each format
 */
var maxChannelValues = (_b = {},
    _b[RGB] = colorArray(255, 255, 255, 1),
    _b[HSL] = colorArray(360, 1, 1, 1),
    _b);
/**
 * Creates a color from a hex color code or named color.
 * e.g. color('red') or color('#FF0000') or color('#F00'))
 */
export function color(value) {
    return parseNamedColor(value) || parseHexCode(value) || parseColorFunction(value) || parseNamedColor('red');
}
/**
 * Creates a color from hue, saturation, and lightness.  Alpha is automatically set to 100%
 */
export function hsl(hue, saturation, lightness) {
    return new ColorHelper(HSL, modDegrees(hue), ensurePercent(saturation), ensurePercent(lightness), 1, false);
}
/**
 * Creates a color from hue, saturation, lightness, and alpha
 */
export function hsla(hue, saturation, lightness, opacity) {
    return new ColorHelper(HSL, modDegrees(hue), ensurePercent(saturation), ensurePercent(lightness), ensurePercent(opacity), true);
}
/**
 * Creates a color form the red, blue, and green color space.  Alpha is automatically set to 100%
 */
export function rgb(red, blue, green) {
    return new ColorHelper(RGB, red, blue, green, 1, false);
}
/**
 * Creates a color form the red, blue, green, and alpha in the color space
 */
export function rgba(red, blue, green, alpha) {
    return new ColorHelper(RGB, red, blue, green, ensurePercent(alpha), true);
}
/**
 * A CSS Color.  Includes utilities for converting between color types
 */
var ColorHelper = (function () {
    function ColorHelper(format, c0, c1, c2, c3, hasAlpha) {
        this._format = format;
        this._hasAlpha = hasAlpha;
        this._values = colorArray(clampColor(format, 0, c0), clampColor(format, 1, c1), clampColor(format, 2, c2), clampColor(format, 3, c3));
    }
    ColorHelper.convertHelper = function (toFormat, helper) {
        var fromFormat = helper._format;
        var v = helper._values;
        var a = helper._hasAlpha;
        return fromFormat === toFormat
            ? helper
            : converters[fromFormat - toFormat](v[R], v[G], v[B], v[A], a);
    };
    /**
     * Converts the stored color into string form (which is used by Free Style)
     */
    ColorHelper.prototype.toString = function () {
        var format = this._format;
        var v = this._values;
        var hasAlpha = this._hasAlpha;
        var fnName;
        var params;
        // find function name and resolve first three channels
        if (format === RGB) {
            fnName = hasAlpha ? 'rgba' : 'rgb';
            params = [Math.round(v[R]), Math.round(v[G]), Math.round(v[B])];
        }
        else if (format === HSL) {
            fnName = hasAlpha ? 'hsla' : 'hsl';
            params = [Math.round(v[H]), formatPercent(roundFloat(v[S], 100)), formatPercent(roundFloat(v[L], 100))];
        }
        else {
            throw new Error('Invalid color format');
        }
        // add alpha channel if needed
        if (hasAlpha) {
            params.push(formatFloat(roundFloat(v[A], 100000)));
        }
        // return as a string
        return cssFunction(fnName, params);
    };
    /**
     * Converts to hex rgb(255, 255, 255) to #FFFFFF
     */
    ColorHelper.prototype.toHexString = function () {
        var v = ColorHelper.convertHelper(RGB, this)._values;
        return '#' + (toHex(v[R]) + toHex(v[G]) + toHex(v[B])).toUpperCase();
    };
    /**
     * Converts to the Hue, Saturation, Lightness color space
     */
    ColorHelper.prototype.toHSL = function () {
        var v = this._values;
        return convert(this._format, HSL, v[H], v[S], v[L], 1, false);
    };
    /**
     * Converts to the Hue, Saturation, Lightness color space and adds an alpha channel
     */
    ColorHelper.prototype.toHSLA = function () {
        var v = this._values;
        return convert(this._format, HSL, v[H], v[S], v[L], v[A], true);
    };
    /**
     * Converts to the Red, Green, Blue color space
     */
    ColorHelper.prototype.toRGB = function () {
        var v = this._values;
        return convert(this._format, RGB, v[R], v[G], v[B], 1, false);
    };
    /**
     * Converts to the Red, Green, Blue color space and adds an alpha channel
     */
    ColorHelper.prototype.toRGBA = function () {
        var v = this._values;
        return convert(this._format, RGB, v[R], v[G], v[B], v[A], true);
    };
    ColorHelper.prototype.red = function () {
        return (this._format === RGB ? this : this.toRGB())._values[0];
    };
    ColorHelper.prototype.green = function () {
        return (this._format === RGB ? this : this.toRGB())._values[1];
    };
    ColorHelper.prototype.blue = function () {
        return (this._format === RGB ? this : this.toRGB())._values[2];
    };
    ColorHelper.prototype.hue = function () {
        return (this._format === HSL ? this : this.toHSL())._values[0];
    };
    ColorHelper.prototype.saturation = function () {
        return (this._format === HSL ? this : this.toHSL())._values[1];
    };
    ColorHelper.prototype.lightness = function () {
        return (this._format === HSL ? this : this.toHSL())._values[2];
    };
    ColorHelper.prototype.alpha = function () {
        return this._values[A];
    };
    ColorHelper.prototype.opacity = function () {
        return this.alpha();
    };
    ColorHelper.prototype.invert = function () {
        var v = ColorHelper.convertHelper(RGB, this)._values;
        return ColorHelper.convertHelper(this._format, new ColorHelper(RGB, 255 - v[R], 255 - v[G], 255 - v[B], this._values[A], this._hasAlpha));
    };
    ColorHelper.prototype.lighten = function (percent, relative) {
        var v = ColorHelper.convertHelper(HSL, this)._values;
        var max = maxChannelValues[HSL][L];
        var l = v[L] + ((relative ? (max - v[L]) : max) * ensurePercent(percent));
        return ColorHelper.convertHelper(this._format, new ColorHelper(HSL, v[H], v[S], l, this._values[A], this._hasAlpha));
    };
    ColorHelper.prototype.darken = function (percent, relative) {
        var v = ColorHelper.convertHelper(HSL, this)._values;
        var l = v[L] - ((relative ? v[L] : maxChannelValues[HSL][L]) * ensurePercent(percent));
        return ColorHelper.convertHelper(this._format, new ColorHelper(HSL, v[H], v[S], l, this._values[A], this._hasAlpha));
    };
    ColorHelper.prototype.saturate = function (percent, relative) {
        var v = ColorHelper.convertHelper(HSL, this)._values;
        var max = maxChannelValues[HSL][S];
        var s = v[S] + ((relative ? (max - v[S]) : max) * ensurePercent(percent));
        return ColorHelper.convertHelper(this._format, new ColorHelper(HSL, v[H], s, v[L], this._values[A], this._hasAlpha));
    };
    ColorHelper.prototype.desaturate = function (percent, relative) {
        var v = ColorHelper.convertHelper(HSL, this)._values;
        var max = maxChannelValues[HSL][S];
        var s = v[S] - ((relative ? v[S] : max) * ensurePercent(percent));
        return ColorHelper.convertHelper(this._format, new ColorHelper(HSL, v[H], s, v[L], this._values[A], this._hasAlpha));
    };
    ColorHelper.prototype.grayscale = function () {
        return this.desaturate(1);
    };
    ColorHelper.prototype.fade = function (percent) {
        var v = this._values;
        var a = clampColor(RGB, A, ensurePercent(percent));
        return ColorHelper.convertHelper(this._format, new ColorHelper(this._format, v[R], v[G], v[B], a, true));
    };
    ColorHelper.prototype.fadeOut = function (percent, relative) {
        var v = this._values;
        var max = 1;
        var a = clampColor(RGB, A, v[A] - ((relative ? v[A] : max) * ensurePercent(percent)));
        return ColorHelper.convertHelper(this._format, new ColorHelper(this._format, v[R], v[G], v[B], a, true));
    };
    ColorHelper.prototype.fadeIn = function (percent, relative) {
        var v = this._values;
        var max = 1;
        var a = clampColor(RGB, A, v[A] + ((relative ? v[A] : max) * ensurePercent(percent)));
        return ColorHelper.convertHelper(this._format, new ColorHelper(this._format, v[R], v[G], v[B], a, true));
    };
    ColorHelper.prototype.mix = function (mixin, weight) {
        var color1 = this;
        var color2 = ensureColor(mixin);
        var c1 = ColorHelper.convertHelper(RGB, color1)._values;
        var c2 = ColorHelper.convertHelper(RGB, color2)._values;
        var p = weight === undefined ? .5 : weight;
        var w = 2 * p - 1;
        var a = Math.abs(c1[A] - c2[A]);
        var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        var w2 = 1 - w1;
        var helper = new ColorHelper(RGB, Math.round((c1[R] * w1 + c2[R] * w2)), Math.round((c1[G] * w1 + c2[G] * w2)), Math.round((c1[B] * w1 + c2[B] * w2)), c1[A] * p + c2[A] * (1 - p), color1._hasAlpha || color2._hasAlpha);
        return ColorHelper.convertHelper(this._format, helper);
    };
    ColorHelper.prototype.tint = function (weight) {
        return white.mix(this, weight);
    };
    ColorHelper.prototype.shade = function (weight) {
        return black.mix(this, weight);
    };
    ColorHelper.prototype.spin = function (degrees) {
        var v = ColorHelper.convertHelper(HSL, this)._values;
        return ColorHelper.convertHelper(this._format, new ColorHelper(HSL, modDegrees(v[H] + degrees), v[S], v[L], this._values[A], this._hasAlpha));
    };
    return ColorHelper;
}());
export { ColorHelper };
/**
 * Named colors in the CSS spec. They must be loaded after exported functions and constructor
 *
 */
var namedColors = {
    aliceblue: rgb(240, 248, 245),
    antiquewhite: rgb(250, 235, 215),
    aqua: rgb(0, 255, 255),
    aquamarine: rgb(127, 255, 212),
    azure: rgb(240, 255, 255),
    beige: rgb(245, 245, 220),
    bisque: rgb(255, 228, 196),
    black: rgb(0, 0, 0),
    blanchedalmond: rgb(255, 235, 205),
    blue: rgb(0, 0, 255),
    blueviolet: rgb(138, 43, 226),
    brown: rgb(165, 42, 42),
    burlywood: rgb(222, 184, 35),
    cadetblue: rgb(95, 158, 160),
    chartreuse: rgb(127, 255, 0),
    chocolate: rgb(210, 105, 30),
    coral: rgb(255, 127, 80),
    cornflowerblue: rgb(100, 149, 237),
    cornsilk: rgb(255, 248, 220),
    crimson: rgb(220, 20, 60),
    cyan: rgb(0, 255, 255),
    darkblue: rgb(0, 0, 139),
    darkcyan: rgb(0, 139, 139),
    darkgoldenrod: rgb(184, 134, 11),
    darkgray: rgb(169, 169, 169),
    darkgreen: rgb(0, 100, 0),
    darkgrey: rgb(169, 169, 169),
    darkkhaki: rgb(189, 183, 107),
    darkmagenta: rgb(139, 0, 139),
    darkolivegreen: rgb(85, 107, 47),
    darkorange: rgb(255, 140, 0),
    darkorchid: rgb(153, 50, 204),
    darkred: rgb(139, 0, 0),
    darksalmon: rgb(233, 150, 122),
    darkseagreen: rgb(143, 188, 143),
    darkslateblue: rgb(72, 61, 139),
    darkslategray: rgb(47, 79, 79),
    darkslategrey: rgb(47, 79, 79),
    darkturquoise: rgb(0, 206, 209),
    darkviolet: rgb(148, 0, 211),
    deeppink: rgb(255, 20, 147),
    deepskyblue: rgb(0, 191, 255),
    dimgray: rgb(105, 105, 105),
    dimgrey: rgb(105, 105, 105),
    dodgerblue: rgb(30, 144, 255),
    firebrick: rgb(178, 34, 34),
    floralwhite: rgb(255, 250, 240),
    forestgreen: rgb(34, 139, 34),
    fuchsia: rgb(255, 0, 255),
    gainsboro: rgb(220, 220, 220),
    ghostwhite: rgb(248, 248, 255),
    gold: rgb(255, 215, 0),
    goldenrod: rgb(218, 165, 32),
    gray: rgb(128, 128, 128),
    green: rgb(0, 128, 0),
    greenyellow: rgb(173, 255, 47),
    grey: rgb(128, 128, 128),
    honeydew: rgb(240, 255, 240),
    hotpink: rgb(255, 105, 180),
    indianred: rgb(205, 92, 92),
    indigo: rgb(75, 0, 130),
    ivory: rgb(255, 255, 240),
    khaki: rgb(240, 230, 140),
    lavender: rgb(230, 230, 250),
    lavenderblush: rgb(255, 240, 245),
    lawngreen: rgb(124, 252, 0),
    lemonchiffon: rgb(255, 250, 205),
    lightblue: rgb(173, 216, 230),
    lightcoral: rgb(240, 128, 128),
    lightcyan: rgb(224, 255, 255),
    lightgoldenrodyellow: rgb(250, 250, 210),
    lightgray: rgb(211, 211, 211),
    lightgreen: rgb(144, 238, 144),
    lightgrey: rgb(211, 211, 211),
    lightpink: rgb(255, 182, 193),
    lightsalmon: rgb(255, 160, 122),
    lightseagreen: rgb(32, 178, 170),
    lightskyblue: rgb(135, 206, 250),
    lightslategray: rgb(119, 136, 153),
    lightslategrey: rgb(119, 136, 153),
    lightsteelblue: rgb(176, 196, 222),
    lightyellow: rgb(255, 255, 224),
    lime: rgb(0, 255, 0),
    limegreen: rgb(50, 205, 50),
    linen: rgb(250, 240, 230),
    maroon: rgb(128, 0, 0),
    mediumaquamarine: rgb(102, 205, 170),
    mediumblue: rgb(0, 0, 205),
    mediumorchid: rgb(186, 85, 211),
    mediumpurple: rgb(147, 112, 219),
    mediumseagreen: rgb(60, 179, 113),
    mediumslateblue: rgb(123, 104, 238),
    mediumspringgreen: rgb(0, 250, 154),
    mediumturquoise: rgb(72, 209, 204),
    mediumvioletred: rgb(199, 21, 133),
    midnightblue: rgb(25, 25, 112),
    mintcream: rgb(245, 255, 250),
    mistyrose: rgb(255, 228, 225),
    moccasin: rgb(255, 228, 181),
    navajowhite: rgb(255, 222, 173),
    navy: rgb(0, 0, 128),
    oldlace: rgb(253, 245, 230),
    olive: rgb(128, 128, 0),
    olivedrab: rgb(107, 142, 35),
    orange: rgb(255, 165, 0),
    purple: rgb(128, 0, 128),
    rebeccapurple: rgb(102, 51, 153),
    red: rgb(255, 0, 0),
    silver: rgb(192, 192, 192),
    teal: rgb(0, 128, 128),
    transparent: rgba(0, 0, 0, 0),
    white: rgb(255, 255, 255),
    yellow: rgb(255, 255, 0),
};
export var aliceblue = namedColors.aliceblue, antiquewhite = namedColors.antiquewhite, aqua = namedColors.aqua, aquamarine = namedColors.aquamarine, azure = namedColors.azure, beige = namedColors.beige, bisque = namedColors.bisque, black = namedColors.black, blanchedalmond = namedColors.blanchedalmond, blue = namedColors.blue, blueviolet = namedColors.blueviolet, brown = namedColors.brown, burlywood = namedColors.burlywood, cadetblue = namedColors.cadetblue, chartreuse = namedColors.chartreuse, chocolate = namedColors.chocolate, coral = namedColors.coral, cornflowerblue = namedColors.cornflowerblue, cornsilk = namedColors.cornsilk, crimson = namedColors.crimson, cyan = namedColors.cyan, darkblue = namedColors.darkblue, darkcyan = namedColors.darkcyan, darkgoldenrod = namedColors.darkgoldenrod, darkgray = namedColors.darkgray, darkgreen = namedColors.darkgreen, darkgrey = namedColors.darkgrey, darkkhaki = namedColors.darkkhaki, darkmagenta = namedColors.darkmagenta, darkolivegreen = namedColors.darkolivegreen, darkorange = namedColors.darkorange, darkorchid = namedColors.darkorchid, darkred = namedColors.darkred, darksalmon = namedColors.darksalmon, darkseagreen = namedColors.darkseagreen, darkslateblue = namedColors.darkslateblue, darkslategray = namedColors.darkslategray, darkslategrey = namedColors.darkslategrey, darkturquoise = namedColors.darkturquoise, darkviolet = namedColors.darkviolet, deeppink = namedColors.deeppink, deepskyblue = namedColors.deepskyblue, dimgray = namedColors.dimgray, dimgrey = namedColors.dimgrey, dodgerblue = namedColors.dodgerblue, firebrick = namedColors.firebrick, floralwhite = namedColors.floralwhite, forestgreen = namedColors.forestgreen, fuchsia = namedColors.fuchsia, gainsboro = namedColors.gainsboro, ghostwhite = namedColors.ghostwhite, gold = namedColors.gold, goldenrod = namedColors.goldenrod, gray = namedColors.gray, green = namedColors.green, greenyellow = namedColors.greenyellow, grey = namedColors.grey, honeydew = namedColors.honeydew, hotpink = namedColors.hotpink, indianred = namedColors.indianred, indigo = namedColors.indigo, ivory = namedColors.ivory, khaki = namedColors.khaki, lavender = namedColors.lavender, lavenderblush = namedColors.lavenderblush, lawngreen = namedColors.lawngreen, lemonchiffon = namedColors.lemonchiffon, lightblue = namedColors.lightblue, lightcoral = namedColors.lightcoral, lightcyan = namedColors.lightcyan, lightgoldenrodyellow = namedColors.lightgoldenrodyellow, lightgray = namedColors.lightgray, lightgreen = namedColors.lightgreen, lightgrey = namedColors.lightgrey, lightpink = namedColors.lightpink, lightsalmon = namedColors.lightsalmon, lightseagreen = namedColors.lightseagreen, lightskyblue = namedColors.lightskyblue, lightslategray = namedColors.lightslategray, lightslategrey = namedColors.lightslategrey, lightsteelblue = namedColors.lightsteelblue, lightyellow = namedColors.lightyellow, lime = namedColors.lime, limegreen = namedColors.limegreen, linen = namedColors.linen, maroon = namedColors.maroon, mediumaquamarine = namedColors.mediumaquamarine, mediumblue = namedColors.mediumblue, mediumorchid = namedColors.mediumorchid, mediumpurple = namedColors.mediumpurple, mediumseagreen = namedColors.mediumseagreen, mediumslateblue = namedColors.mediumslateblue, mediumspringgreen = namedColors.mediumspringgreen, mediumturquoise = namedColors.mediumturquoise, mediumvioletred = namedColors.mediumvioletred, midnightblue = namedColors.midnightblue, mintcream = namedColors.mintcream, mistyrose = namedColors.mistyrose, moccasin = namedColors.moccasin, navajowhite = namedColors.navajowhite, navy = namedColors.navy, oldlace = namedColors.oldlace, olive = namedColors.olive, olivedrab = namedColors.olivedrab, orange = namedColors.orange, purple = namedColors.purple, rebeccapurple = namedColors.rebeccapurple, red = namedColors.red, silver = namedColors.silver, teal = namedColors.teal, transparent = namedColors.transparent, white = namedColors.white, yellow = namedColors.yellow;
function toHex(n) {
    var i = Math.round(n);
    return (i < 16 ? '0' : '') + i.toString(16);
}
function modDegrees(n) {
    // note: maybe there is a way to simplify this
    return ((n < 0 ? 360 : 0) + (n % 360)) % 360;
}
function RGBtoHSL(c0, c1, c2, c3, hasAlpha) {
    var r = c0 / 255;
    var g = c1 / 255;
    var b = c2 / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var l = (min + max) / 2;
    var delta = max - min;
    var h;
    if (max === min) {
        h = 0;
    }
    else if (r === max) {
        h = (g - b) / delta;
    }
    else if (g === max) {
        h = 2 + (b - r) / delta;
    }
    else if (b === max) {
        h = 4 + (r - g) / delta;
    }
    else {
        h = 0;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
        h += 360;
    }
    var s;
    if (max === min) {
        s = 0;
    }
    else if (l <= 0.5) {
        s = delta / (max + min);
    }
    else {
        s = delta / (2 - max - min);
    }
    return new ColorHelper(HSL, h, s, l, c3, hasAlpha);
}
;
function HSLtoRGB(c0, c1, c2, c3, hasAlpha) {
    var h = c0 / 360;
    var s = c1;
    var l = c2;
    if (s === 0) {
        var val = l * 255;
        return new ColorHelper(RGB, val, val, val, c3, hasAlpha);
    }
    var t2 = l < .5 ? l * (1 + s) : l + s - l * s;
    var t1 = 2 * l - t2;
    var r = 0, g = 0, b = 0;
    for (var i = 0; i < 3; i++) {
        var t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
            t3++;
        }
        if (t3 > 1) {
            t3--;
        }
        var val = void 0;
        if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
        }
        else if (2 * t3 < 1) {
            val = t2;
        }
        else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        }
        else {
            val = t1;
        }
        val *= 255;
        // manually set variables instead of using an array
        if (i === 0) {
            r = val;
        }
        else if (i === 1) {
            g = val;
        }
        else {
            b = val;
        }
    }
    return new ColorHelper(RGB, r, g, b, c3, hasAlpha);
}
;
/**
 * Converts from one format to another format
 */
function convert(fromFormat, toFormat, c0, c1, c2, c3, hasAlpha) {
    return fromFormat === toFormat
        ? new ColorHelper(fromFormat, c0, c1, c2, c3, hasAlpha)
        : converters[fromFormat - toFormat](c0, c1, c2, c3, hasAlpha);
}
function colorArray(c0, c1, c2, c3) {
    if (!isTypeArraySupported) {
        return [c0 || 0, c1 || 0, c2 || 0, c3 || 0];
    }
    var a = new Float32Array(4);
    a[0] = c0 || 0;
    a[1] = c1 || 0;
    a[2] = c2 || 0;
    a[3] = c3 || 0;
    return a;
}
function clampColor(format, channel, value) {
    var min = 0;
    var max = maxChannelValues[format][channel];
    return value < min ? min : value > max ? max : value;
}
function ensureColor(c) {
    return c instanceof ColorHelper ? c : color(c);
}
function parseNamedColor(stringValue) {
    return namedColors[stringValue] || undefined;
}
function parseHexCode(stringValue) {
    var match = stringValue.match(/#(([a-f0-9]{6})|([a-f0-9]{3}))$/i);
    if (!match) {
        return undefined;
    }
    var hex = match[1];
    var hexColor = parseInt(hex.length === 3
        ? hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]
        : hex, 16);
    var r = (hexColor >> 16) & 0xFF;
    var b = (hexColor >> 8) & 0xFF;
    var g = hexColor & 0xFF;
    return new ColorHelper(RGB, r, b, g, 1, false);
}
;
function parseColorFunction(colorString) {
    var cssParts = parseCSSFunction(colorString);
    if (!cssParts || !(cssParts.length === 4 || cssParts.length === 5)) {
        return undefined;
    }
    var fn = cssParts[0];
    var isRGBA = fn === 'rgba';
    var isHSLA = fn === 'hsla';
    var isRGB = fn === 'rgb';
    var isHSL = fn === 'hsl';
    var hasAlpha = isHSLA || isRGBA;
    var type;
    if (isRGB || isRGBA) {
        type = RGB;
    }
    else if (isHSL || isHSLA) {
        type = HSL;
    }
    else {
        throw new Error('unsupported color string');
    }
    var c0 = parseFloat(cssParts[1]);
    var c1 = isRGB || isRGBA ? parseFloat(cssParts[2]) : ensurePercent(cssParts[2]);
    var c2 = isRGB || isRGBA ? parseFloat(cssParts[3]) : ensurePercent(cssParts[3]);
    var c3 = hasAlpha ? parseFloat(cssParts[4]) : 1;
    return new ColorHelper(type, c0, c1, c2, c3, hasAlpha);
}
var _a, _b;
